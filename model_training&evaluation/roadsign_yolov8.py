# -*- coding: utf-8 -*-
"""RoadSign:YOLOv8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tnxdMDlnv-Z1Zd6O5ikOV5n2d3ps9eus

# YOLOv8 for Road Sign Detection

**Training Data:**

Road Signs Dataset

URL: [https://makeml.app/datasets/road-signs](https://makeml.app/datasets/road-signs)

Make ML

Photo by Erik Mclean on Unsplash

<br>

**Road Sign Detection:**

This dataset contains 877 images of 4 different classes for road sign detection.

Classes:
* Traffic Light
* Stop
* Speed Limit
* Crosswalk

<br>

**Using Roboflow:**

The [data](https://www.kaggle.com/datasets/andrewmvd/road-sign-detection) has been converted to YOLO format using the [Roboflow](https://app.roboflow.com) platform.
"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="dPS87OhluxnkOQrLPbu5")
project = rf.workspace("yolo-vrmms").project("road-sign-sfvle")
version = project.version(1)
dataset = version.download("yolov8")

"""Using YOLOv8 - [Ultralytics](https://docs.ultralytics.com/modes/train/#key-features-of-train-mode) :"""

!pip install ultralytics
from ultralytics import YOLO

"""**Modify `data.yaml`:**"""

!cat Road-Sign-1/data.yaml

import yaml

with open('/content/Road-Sign-1/data.yaml', 'r') as file:
    data = yaml.safe_load(file)

data['test'] = '/content/Road-Sign-1/test/images'
data['train'] = '/content/Road-Sign-1/train/images'
data['val'] = '/content/Road-Sign-1/valid/images'

with open('/content/Road-Sign-1/data.yaml', 'w') as file:
    yaml.safe_dump(data, file)

!cat Road-Sign-1/data.yaml

"""# Train"""

model = YOLO("yolov8s.pt")
results = model.train(data="Road-Sign-1/data.yaml", epochs=30, imgsz=640)

"""# Evaluate"""

metrics = model.val()
print(metrics)

"""`NotImplementedError : A UTF-8 locale is required`  fix :


"""

import locale
def getpreferredencoding(do_setlocale = True):
    return "UTF-8"
locale.getpreferredencoding = getpreferredencoding

!ls Road-Sign-1/test/images/

import matplotlib.pyplot as plt
import cv2

"""# Test"""

test_image_path = "Road-Sign-1/test/images/road91_png.rf.abca29e5c36d87439001b5afd53aa6aa.jpg"
results = model.predict(source=test_image_path, save=True)

img = cv2.imread(test_image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(6, 6))
plt.imshow(img)

for result in results:
    boxes = result.boxes.xyxy
    scores = result.boxes.conf
    labels = result.boxes.cls

    for box, score, label in zip(boxes, scores, labels):
        x1, y1, x2, y2 = box
        x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)
        cv2.rectangle(img, (x1, y1), (x2, y2), (255, 0, 0), 2)
        cv2.putText(img, f'{model.names[int(label)]} {score:.2f}', (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)

plt.imshow(img)
plt.axis('off')
plt.show()

"""**Test set metrics**"""

metrics = model.val(data="Road-Sign-1/data.yaml", split='test')

print(metrics)

"""# Export"""

from google.colab import files
import os

model.export(format="tflite")

!ls runs/detect/train

files.download("runs/detect/train/weights//best_saved_model/best_float32.tflite")

path1 = '/content/runs/detect/train/F1_curve.png'
path2 = '/content/runs/detect/train/confusion_matrix.png'

img1 = cv2.imread(path1)
img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)

img2 = cv2.imread(path2)
img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.imshow(img1)
plt.title('F1 Curve')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(img2)
plt.title('Confusion Matrix')
plt.axis('off')

plt.show()

path1 = '/content/runs/detect/train/train_batch0.jpg'
path2 = '/content/runs/detect/train/val_batch0_labels.jpg'
path3 = '/content/runs/detect/train/val_batch0_pred.jpg'


img1 = cv2.imread(path1)
img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)

img2 = cv2.imread(path2)
img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2RGB)

img3 = cv2.imread(path3)
img3 = cv2.cvtColor(img3, cv2.COLOR_BGR2RGB)


plt.figure(figsize=(18, 6))


plt.subplot(1, 3, 1)
plt.imshow(img1)
plt.title('Train Batch 0')
plt.axis('off')


plt.subplot(1, 3, 2)
plt.imshow(img2)
plt.title('Val Batch 0 Labels')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(img3)
plt.title('Val Batch 0 Pred')
plt.axis('off')


plt.show()